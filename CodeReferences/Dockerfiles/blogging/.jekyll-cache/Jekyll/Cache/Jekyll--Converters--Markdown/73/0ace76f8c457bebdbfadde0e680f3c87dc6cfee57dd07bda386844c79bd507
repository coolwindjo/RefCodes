I"ò&<h3 id="github">GitHub</h3>
<p><a href="https://github.com/coolwindjo/RefCodes/blob/master/AlgoGuruProject/Done/RoadConstruction" title="RoadConstruction">RoadConstruction</a></p>

<p><img src="/assets/img/posting/road_construction.png" alt="RoadConstruction" /></p>

<h3 id="source">Source</h3>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp">	<span class="k">explicit</span> <span class="nf">CProbSolve</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">m_mapSizeN</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
		<span class="n">m_minCost</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
		<span class="n">FOR</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">vii</span> <span class="n">viiRow</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
			<span class="k">while</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">const</span> <span class="kt">char</span> <span class="n">cVal</span> <span class="o">=</span> <span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
				<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">cVal</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">val</span> <span class="o">&lt;=</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">viiRow</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ii</span><span class="p">(</span><span class="n">INF</span><span class="p">,</span> <span class="n">val</span><span class="p">));</span>
					<span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="n">m_map</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">viiRow</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="n">_Solve</span><span class="p">();</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">_Dijkstra</span><span class="p">(</span><span class="k">const</span> <span class="n">ii</span> <span class="n">start</span><span class="p">,</span> <span class="k">const</span> <span class="n">ii</span> <span class="n">finish</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">m_pqiiPos</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i_ii</span><span class="p">(</span><span class="o">-</span><span class="n">m_map</span><span class="p">[</span><span class="n">start</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">start</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">second</span><span class="p">,</span> <span class="n">start</span><span class="p">));</span>
		<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">m_pqiiPos</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
			<span class="k">const</span> <span class="n">i_ii</span> <span class="n">cost_pos</span> <span class="o">=</span> <span class="n">m_pqiiPos</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">m_pqiiPos</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
			<span class="k">const</span> <span class="kt">int</span> <span class="n">cost</span> <span class="o">=</span> <span class="o">-</span><span class="n">cost_pos</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">cost_pos</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">cost_pos</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>

			<span class="c1">// Check if it's deprecated cost</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">cost</span> <span class="o">&gt;</span> <span class="n">m_map</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">].</span><span class="n">first</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

			<span class="n">FOR</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">eDIR_LEN</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">const</span> <span class="kt">int</span> <span class="n">nextRow</span> <span class="o">=</span> <span class="n">row</span> <span class="o">+</span> <span class="kt">DIR</span><span class="p">[</span><span class="n">dir</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
				<span class="k">const</span> <span class="kt">int</span> <span class="n">nextCol</span> <span class="o">=</span> <span class="n">col</span> <span class="o">+</span> <span class="kt">DIR</span><span class="p">[</span><span class="n">dir</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">OOR</span><span class="p">(</span><span class="n">nextRow</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">OOR</span><span class="p">(</span><span class="n">nextCol</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
				<span class="k">const</span> <span class="kt">int</span> <span class="n">nextCost</span> <span class="o">=</span> <span class="n">cost</span> <span class="o">+</span> <span class="n">m_map</span><span class="p">[</span><span class="n">nextRow</span><span class="p">][</span><span class="n">nextCol</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>

				<span class="c1">// Check if it's smaller cost</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">nextCost</span> <span class="o">&gt;=</span> <span class="n">m_map</span><span class="p">[</span><span class="n">nextRow</span><span class="p">][</span><span class="n">nextCol</span><span class="p">].</span><span class="n">first</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

				<span class="c1">// Visit</span>
				<span class="n">m_map</span><span class="p">[</span><span class="n">nextRow</span><span class="p">][</span><span class="n">nextCol</span><span class="p">].</span><span class="n">first</span> <span class="o">=</span> <span class="n">nextCost</span><span class="p">;</span>
<span class="cp">#if 1
</span>				<span class="c1">// Check if it reaches the finish point</span>
				<span class="k">if</span> <span class="p">((</span><span class="n">nextRow</span> <span class="o">==</span> <span class="n">finish</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">nextCol</span> <span class="o">==</span> <span class="n">finish</span><span class="p">.</span><span class="n">second</span><span class="p">))</span> <span class="p">{</span>
					<span class="n">m_minCost</span> <span class="o">=</span> <span class="n">nextCost</span><span class="p">;</span>
					<span class="k">return</span><span class="p">;</span>
				<span class="p">}</span>
<span class="cp">#endif // 1
</span>				<span class="c1">// Add next cell to start from</span>
				<span class="n">m_pqiiPos</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i_ii</span><span class="p">(</span><span class="o">-</span><span class="n">nextCost</span><span class="p">,</span> <span class="n">ii</span><span class="p">(</span><span class="n">nextRow</span><span class="p">,</span> <span class="n">nextCol</span><span class="p">)));</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="n">m_minCost</span> <span class="o">=</span> <span class="n">m_map</span><span class="p">[</span><span class="n">finish</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">finish</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
	<span class="p">}</span></code></pre></figure>

:ET