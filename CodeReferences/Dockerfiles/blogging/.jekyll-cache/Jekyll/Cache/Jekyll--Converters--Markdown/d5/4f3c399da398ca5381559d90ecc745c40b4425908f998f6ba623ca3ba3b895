I"°—<h3 id="github">GitHub</h3>
<p><a href="https://github.com/coolwindjo/RefCodes/blob/master/AlgoGuruProject/Done/Game2048" title="Game2048">Game2048</a></p>

<p><img src="/assets/img/posting/game_2048.png" alt="Game2048" /></p>

<h3 id="source">Source</h3>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp">	<span class="kt">void</span> <span class="nf">_DFS</span><span class="p">(</span><span class="k">const</span> <span class="n">vvi</span> <span class="o">&amp;</span><span class="n">map</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">numMoves</span><span class="p">,</span> <span class="k">const</span> <span class="n">Dir_e</span> <span class="n">dir</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">vvi</span> <span class="n">movedMap</span><span class="p">(</span><span class="n">map</span><span class="p">);</span>
<span class="cp">#if 1
</span>        <span class="n">_MoveWithQ</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">movedMap</span><span class="p">);</span>
<span class="cp">#else
</span>        <span class="n">_Move</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">movedMap</span><span class="p">);</span>
<span class="cp">#endif // 0
</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">numMoves</span> <span class="o">==</span> <span class="n">MAX_MOVES</span><span class="p">)</span>
        <span class="p">{</span>
			<span class="k">const</span> <span class="kt">int</span> <span class="n">biggest</span> <span class="o">=</span> <span class="n">GetBiggest</span><span class="p">(</span><span class="n">movedMap</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">biggest</span> <span class="o">&gt;</span> <span class="n">m_maxVal</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">m_maxVal</span> <span class="o">=</span> <span class="n">biggest</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">return</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">FOR</span><span class="p">(</span><span class="n">nextDir</span><span class="p">,</span> <span class="n">eDIR_LEN</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">_DFS</span><span class="p">(</span><span class="n">movedMap</span><span class="p">,</span> <span class="n">numMoves</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">Dir_e</span><span class="p">)</span><span class="n">nextDir</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="nf">_MoveWithQ</span><span class="p">(</span><span class="k">const</span> <span class="n">Dir_e</span> <span class="n">dir</span><span class="p">,</span> <span class="n">vvi</span> <span class="o">&amp;</span><span class="n">mapOut</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">numMerges</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">switch</span> <span class="p">(</span><span class="n">dir</span><span class="p">)</span>
		<span class="p">{</span>
		<span class="k">case</span> <span class="n">eR</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">qi</span> <span class="n">qiVals</span><span class="p">;</span>
				<span class="n">FOR_DEC</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
						<span class="n">qiVals</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">}</span>

				<span class="n">FOR_DEC</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">_FillCell</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span>
							  <span class="n">mapOut</span><span class="p">,</span> <span class="n">qiVals</span><span class="p">,</span> <span class="n">numMerges</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">eD</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">qi</span> <span class="n">qiVals</span><span class="p">;</span>
				<span class="n">FOR_DEC</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
						<span class="n">qiVals</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">}</span>

				<span class="n">FOR_DEC</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">_FillCell</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span>
							  <span class="n">mapOut</span><span class="p">,</span> <span class="n">qiVals</span><span class="p">,</span> <span class="n">numMerges</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">eL</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">qi</span> <span class="n">qiVals</span><span class="p">;</span>
				<span class="n">FOR_INC</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
						<span class="n">qiVals</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">}</span>

				<span class="n">FOR_INC</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">_FillCell</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span>
							  <span class="n">mapOut</span><span class="p">,</span> <span class="n">qiVals</span><span class="p">,</span> <span class="n">numMerges</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">eU</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">qi</span> <span class="n">qiVals</span><span class="p">;</span>
				<span class="n">FOR_INC</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
						<span class="n">qiVals</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">val</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">}</span>

				<span class="n">FOR_INC</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">_FillCell</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span>
							  <span class="n">mapOut</span><span class="p">,</span> <span class="n">qiVals</span><span class="p">,</span> <span class="n">numMerges</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="nl">default:</span>
			<span class="n">P_IFNOT</span><span class="p">(</span><span class="n">dir</span> <span class="o">&lt;</span> <span class="n">eDIR_LEN</span><span class="p">,</span> <span class="n">dir</span><span class="p">);</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="k">return</span> <span class="n">numMerges</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">void</span> <span class="nf">_FillCell</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span>
				   <span class="n">vvi</span> <span class="o">&amp;</span><span class="n">mapOut</span><span class="p">,</span> <span class="n">qi</span> <span class="o">&amp;</span><span class="n">qiValsOut</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">numMergesOut</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">pivotVal</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

		<span class="c1">// A. visit next</span>
		<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">qiValsOut</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
			<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">qiValsOut</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>

			<span class="c1">// C. check to be merged</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">==</span> <span class="n">pivotVal</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
				<span class="n">pivotVal</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
				<span class="n">numMergesOut</span><span class="o">++</span><span class="p">;</span>
				<span class="n">qiValsOut</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">pivotVal</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
					<span class="k">break</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="c1">// D. set pivot</span>
			<span class="n">pivotVal</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
			<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span><span class="p">;</span>
			<span class="n">qiValsOut</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="nf">_Move</span><span class="p">(</span><span class="k">const</span> <span class="n">Dir_e</span> <span class="n">dir</span><span class="p">,</span> <span class="n">vvi</span> <span class="o">&amp;</span><span class="n">mapOut</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">numMerges</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="k">switch</span> <span class="p">(</span><span class="n">dir</span><span class="p">)</span>
		<span class="p">{</span>
		<span class="k">case</span> <span class="n">eR</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="kt">int</span> <span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">pivotCol</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">emptyCellCol</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="n">FOR_DEC</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="c1">// A. visit next</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="c1">// C. check to be merged</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">==</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">pivotCol</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
								<span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">numMerges</span><span class="o">++</span><span class="p">;</span>

								<span class="c1">// G. set empty cell</span>
								<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
									<span class="n">emptyCellCol</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
								<span class="p">}</span>
								<span class="k">continue</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>

						<span class="c1">// D. set pivot</span>
						<span class="n">pivotVal</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">pivotCol</span> <span class="o">=</span> <span class="n">emptyCellCol</span><span class="p">;</span>

							<span class="c1">// E. move pivot value into empty cell</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">emptyCellCol</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span><span class="p">;</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

							<span class="c1">// F. set next empty cell</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">&gt;</span> <span class="n">col</span><span class="p">)</span> <span class="p">{</span>
								<span class="o">--</span><span class="n">emptyCellCol</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>
						<span class="k">else</span> <span class="p">{</span>
							<span class="n">pivotCol</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="k">else</span> <span class="p">{</span>
						<span class="c1">// B. set empty cell</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">emptyCellCol</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">eD</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="kt">int</span> <span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">pivotRow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">emptyCellRow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="n">FOR_DEC</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="c1">// A. visit next</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="c1">// C. check to be merged</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">==</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">pivotRow</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
								<span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">numMerges</span><span class="o">++</span><span class="p">;</span>

								<span class="c1">// G. set empty cell</span>
								<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
									<span class="n">emptyCellRow</span> <span class="o">=</span> <span class="n">row</span><span class="p">;</span>
								<span class="p">}</span>
								<span class="k">continue</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>

						<span class="c1">// D. set pivot</span>
						<span class="n">pivotVal</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">pivotRow</span> <span class="o">=</span> <span class="n">emptyCellRow</span><span class="p">;</span>

							<span class="c1">// E. move pivot value into empty cell</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">emptyCellRow</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span><span class="p">;</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

							<span class="c1">// F. set next empty cell</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">&gt;</span> <span class="n">row</span><span class="p">)</span> <span class="p">{</span>
								<span class="o">--</span><span class="n">emptyCellRow</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>
						<span class="k">else</span> <span class="p">{</span>
							<span class="n">pivotRow</span> <span class="o">=</span> <span class="n">row</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="k">else</span> <span class="p">{</span>
						<span class="c1">// B. set empty cell</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">emptyCellRow</span> <span class="o">=</span> <span class="n">row</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">eL</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="kt">int</span> <span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">pivotCol</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">emptyCellCol</span> <span class="o">=</span> <span class="n">m_mapSizeN</span><span class="p">;</span>
				<span class="n">FOR_INC</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="c1">// A. visit next</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="c1">// C. check to be merged</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">==</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">pivotCol</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
								<span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">numMerges</span><span class="o">++</span><span class="p">;</span>

								<span class="c1">// G. set empty cell</span>
								<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">==</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
									<span class="n">emptyCellCol</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
								<span class="p">}</span>
								<span class="k">continue</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>

						<span class="c1">// D. set pivot</span>
						<span class="n">pivotVal</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">&lt;</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">pivotCol</span> <span class="o">=</span> <span class="n">emptyCellCol</span><span class="p">;</span>

							<span class="c1">// E. move pivot value into empty cell</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">emptyCellCol</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span><span class="p">;</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

							<span class="c1">// F. set next empty cell</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">&lt;</span> <span class="n">col</span><span class="p">)</span> <span class="p">{</span>
								<span class="o">++</span><span class="n">emptyCellCol</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>
						<span class="k">else</span> <span class="p">{</span>
							<span class="n">pivotCol</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="k">else</span> <span class="p">{</span>
						<span class="c1">// B. set empty cell</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellCol</span> <span class="o">==</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">emptyCellCol</span> <span class="o">=</span> <span class="n">col</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="k">case</span> <span class="n">eU</span><span class="p">:</span>
			<span class="n">FOR</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
				<span class="kt">int</span> <span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">pivotRow</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">emptyCellRow</span> <span class="o">=</span> <span class="n">m_mapSizeN</span><span class="p">;</span>
				<span class="n">FOR_INC</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
					<span class="c1">// A. visit next</span>
					<span class="k">const</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
							<span class="c1">// C. check to be merged</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">pivotVal</span> <span class="o">==</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">pivotRow</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
								<span class="n">pivotVal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
								<span class="n">numMerges</span><span class="o">++</span><span class="p">;</span>

								<span class="c1">// G. set empty cell</span>
								<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">==</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
									<span class="n">emptyCellRow</span> <span class="o">=</span> <span class="n">row</span><span class="p">;</span>
								<span class="p">}</span>
								<span class="k">continue</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>

						<span class="c1">// D. set pivot</span>
						<span class="n">pivotVal</span> <span class="o">=</span> <span class="n">val</span><span class="p">;</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">&lt;</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">pivotRow</span> <span class="o">=</span> <span class="n">emptyCellRow</span><span class="p">;</span>

							<span class="c1">// E. move pivot value into empty cell</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">emptyCellRow</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivotVal</span><span class="p">;</span>
							<span class="n">mapOut</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

							<span class="c1">// F. set next empty cell</span>
							<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">&lt;</span> <span class="n">row</span><span class="p">)</span> <span class="p">{</span>
								<span class="o">++</span><span class="n">emptyCellRow</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">}</span>
						<span class="k">else</span> <span class="p">{</span>
							<span class="n">pivotRow</span> <span class="o">=</span> <span class="n">row</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="k">else</span> <span class="p">{</span>
						<span class="c1">// B. set empty cell</span>
						<span class="k">if</span> <span class="p">(</span><span class="n">emptyCellRow</span> <span class="o">==</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
							<span class="n">emptyCellRow</span> <span class="o">=</span> <span class="n">row</span><span class="p">;</span>
						<span class="p">}</span>
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="nl">default:</span>
			<span class="n">P_IFNOT</span><span class="p">(</span><span class="n">dir</span> <span class="o">&lt;</span> <span class="n">eDIR_LEN</span><span class="p">,</span> <span class="n">dir</span><span class="p">);</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="k">return</span> <span class="n">numMerges</span><span class="p">;</span>
	<span class="p">}</span></code></pre></figure>

:ET