I"Š+<h3 id="github">GitHub</h3>
<p><a href="https://github.com/coolwindjo/RefCodes/blob/master/AlgoGuruProject/Done/HikingTrail" title="HikingTrail">HikingTrail</a></p>

<p><img src="/assets/img/posting/hiking_trail.png" alt="HikingTrail" /></p>

<h3 id="source">Source</h3>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp">	<span class="kt">void</span> <span class="nf">_DFS</span><span class="p">(</span><span class="k">const</span> <span class="n">ii</span><span class="o">&amp;</span> <span class="n">pos</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">dist</span><span class="p">,</span> <span class="k">const</span> <span class="kt">bool</span> <span class="n">bDigged</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// Visit!</span>
		<span class="n">m_map</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">first</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		<span class="k">const</span> <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="n">m_map</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="n">dist</span> <span class="o">&gt;</span> <span class="n">m_maxDist</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">m_maxDist</span> <span class="o">=</span> <span class="n">dist</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="c1">// Check if it's a deepest point</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">height</span> <span class="o">==</span> <span class="n">m_deepest</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">bDigged</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">m_map</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">first</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// backtracking!</span>
				<span class="k">return</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="p">((</span><span class="kt">size_t</span><span class="p">)</span><span class="n">dist</span> <span class="o">==</span> <span class="n">m_mapSizeN</span> <span class="o">*</span> <span class="n">m_mapSizeN</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">m_map</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">first</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// backtracking!</span>
			<span class="k">return</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="c1">// look up 4 dirs</span>
		<span class="n">FOR</span><span class="p">(</span><span class="n">dir</span><span class="p">,</span> <span class="n">eDIR_LEN</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">const</span> <span class="n">ii</span> <span class="n">nextPos</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span> <span class="o">+</span> <span class="kt">DIR</span><span class="p">[</span><span class="n">dir</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">pos</span><span class="p">.</span><span class="n">second</span> <span class="o">+</span> <span class="kt">DIR</span><span class="p">[</span><span class="n">dir</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">OOR</span><span class="p">(</span><span class="n">nextPos</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">m_mapSizeN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">OOR</span><span class="p">(</span><span class="n">nextPos</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">m_mapSizeN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">m_map</span><span class="p">[</span><span class="n">nextPos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">nextPos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">first</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
			<span class="k">const</span> <span class="kt">int</span> <span class="n">nextH</span> <span class="o">=</span> <span class="n">m_map</span><span class="p">[</span><span class="n">nextPos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">nextPos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">bDigged</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
				<span class="c1">// with optional digging</span>
				<span class="k">if</span> <span class="p">((</span><span class="n">height</span> <span class="o">-</span> <span class="p">(</span><span class="n">nextH</span> <span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">m_maxDigK</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
				<span class="kt">int</span> <span class="n">digging</span> <span class="o">=</span> <span class="n">height</span> <span class="o">-</span> <span class="n">nextH</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">digging</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">P_IFNOT</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="n">digging</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">m_maxDigK</span><span class="p">,</span> <span class="n">height</span><span class="p">);</span>
					<span class="n">P_IFNOT</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="n">digging</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">m_maxDigK</span><span class="p">,</span> <span class="n">nextH</span><span class="p">);</span>
					<span class="n">P_IFNOT</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="n">digging</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">m_maxDigK</span><span class="p">,</span> <span class="n">digging</span><span class="p">);</span>
					<span class="n">m_map</span><span class="p">[</span><span class="n">nextPos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">nextPos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">second</span> <span class="o">=</span> <span class="n">nextH</span> <span class="o">+</span> <span class="p">(</span><span class="n">digging</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
					<span class="n">_DFS</span><span class="p">(</span><span class="n">nextPos</span><span class="p">,</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
					<span class="c1">// backtracking!</span>
					<span class="n">m_map</span><span class="p">[</span><span class="n">nextPos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">nextPos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">second</span> <span class="o">=</span> <span class="n">nextH</span><span class="p">;</span>
					<span class="k">continue</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="p">{</span>
				<span class="c1">// without digging</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">height</span> <span class="o">-</span> <span class="n">nextH</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="n">_DFS</span><span class="p">(</span><span class="n">nextPos</span><span class="p">,</span> <span class="n">dist</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">bDigged</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">m_map</span><span class="p">[</span><span class="n">pos</span><span class="p">.</span><span class="n">first</span><span class="p">][</span><span class="n">pos</span><span class="p">.</span><span class="n">second</span><span class="p">].</span><span class="n">first</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// backtracking!</span>
	<span class="p">}</span></code></pre></figure>

:ET