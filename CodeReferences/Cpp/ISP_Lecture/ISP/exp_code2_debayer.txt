
void ISP_Lab10_small_ISP()
{
	int width,height;
	width = 1920;
	height = 1080;
	int data_16bit,i;
	//int HDR_OUTPUT_MAX_VALUE = (1<<20)-1;

	unsigned short *pBayer_14bit = new unsigned short[width*height];
	unsigned int *pBayer_32bit = new unsigned int[width*height];
	FILE *fp = fopen("..\\..\\testset\\usa_1920x1080x16bit.raw","rb");
	fread(pBayer_14bit,sizeof(unsigned short),width*height,fp);
	fclose(fp);

	//14bit Decompress
	int HDRKneePointP1 = 4096;
	int HDRKneePointP2 = 7946;
	int HDRKneePointP3 = 65535;
	int HDRKneePointRatio1 = 16;
	int HDRKneePointRatio2 = 255;
	int HDRKneePointRatio3 = 255;
	int HDRKneePointNewP2 = 4096;
	int HDRKneePointNewP3 = 65536;
	int HDRKneePointNewP4 = 65536;
	for (i=0;i<width*height;i++) {
		data_16bit = pBayer_14bit[i];		

		if (data_16bit > 0 && data_16bit <= HDRKneePointP1)
		{
			pBayer_32bit[i] = clip_MinMax(data_16bit,0,HDR_OUTPUT_MAX_VALUE);
		}
		else if (data_16bit >= HDRKneePointP1 + 1 && data_16bit <= HDRKneePointP2)
		{
			pBayer_32bit[i] = clip_MinMax((data_16bit - HDRKneePointP1 + 1) * HDRKneePointRatio1 + HDRKneePointNewP2,0,HDR_OUTPUT_MAX_VALUE);
		}		
		else if (data_16bit >= HDRKneePointP2 + 1 && data_16bit <= HDRKneePointP3)
		{
			pBayer_32bit[i] = clip_MinMax((data_16bit - HDRKneePointP2 + 1) * HDRKneePointRatio2 + HDRKneePointNewP3,0,HDR_OUTPUT_MAX_VALUE);
		}		
		else if (data_16bit >= HDRKneePointP3 + 1 )
		{
			pBayer_32bit[i] = clip_MinMax((data_16bit - HDRKneePointP3 + 1) * HDRKneePointRatio3 + HDRKneePointNewP4,0,HDR_OUTPUT_MAX_VALUE);
		}		
		else
		{
			pBayer_32bit[i] = 0;
		}
	}


	delete [] pBayer_14bit;
	delete [] pBayer_32bit;
}



void ISP_Lab5_Debayer()
{
	IplImage *img_out;
	int i,j;
	int unHeight = 1080;
	int unWidth = 1920;
	//unsigned short buf_data_bayer;
	unsigned short *buf_data_bayer = new unsigned short[unWidth*unHeight];
	int *pBayer_32bit = new int [unWidth*unHeight];
	int *buf_data_r = new int[unWidth*unHeight];
	int *buf_data_g = new int[unWidth*unHeight];
	int *buf_data_b = new int[unWidth*unHeight];

	//FILE *fp = fopen("..\\..\\testset\\usa_1920x1080x16bit.raw","rb");
	FILE *fp = fopen("..\\..\\testset\\usa_1920x1080x16bit.raw","rb");
	fread(buf_data_bayer,sizeof(unsigned short),unWidth*unHeight,fp);
	fclose(fp);
	img_out = cvCreateImage(cvSize(1920,1080),8,3);
	//uint16_t *buf_data_bayer = pSrc;

	int data_16bit;

	int HDRKneePointP1 = 4096;
	int HDRKneePointP2 = 7946;
	int HDRKneePointP3 = 65535;
	int HDRKneePointRatio1 = 16;
	int HDRKneePointRatio2 = 255;
	int HDRKneePointRatio3 = 255;
	int HDRKneePointNewP2 = 4096;
	int HDRKneePointNewP3 = 65536;
	int HDRKneePointNewP4 = 65536;
	for (i=0;i<unWidth*unHeight;i++) {
		data_16bit = buf_data_bayer[i];		

		if (data_16bit > 0 && data_16bit <= HDRKneePointP1)
		{
			pBayer_32bit[i] = clip_MinMax(data_16bit,0,HDR_OUTPUT_MAX_VALUE);
		}
		else if (data_16bit >= HDRKneePointP1 + 1 && data_16bit <= HDRKneePointP2)
		{
			pBayer_32bit[i] = clip_MinMax((data_16bit - HDRKneePointP1 + 1) * HDRKneePointRatio1 + HDRKneePointNewP2,0,HDR_OUTPUT_MAX_VALUE);
		}		
		else if (data_16bit >= HDRKneePointP2 + 1 && data_16bit <= HDRKneePointP3)
		{
			pBayer_32bit[i] = clip_MinMax((data_16bit - HDRKneePointP2 + 1) * HDRKneePointRatio2 + HDRKneePointNewP3,0,HDR_OUTPUT_MAX_VALUE);
		}		
		else if (data_16bit >= HDRKneePointP3 + 1 )
		{
			pBayer_32bit[i] = clip_MinMax((data_16bit - HDRKneePointP3 + 1) * HDRKneePointRatio3 + HDRKneePointNewP4,0,HDR_OUTPUT_MAX_VALUE);
		}		
		else
		{
			pBayer_32bit[i] = 0;
		}
	}

	for (i=0;i<unHeight;i++) {
		for (j=0;j<unWidth;j++) {
			if ((i%2)==0 && (j%2)==1) { //r
				buf_data_r[i*unWidth+j] = (int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j,unWidth)];
				buf_data_g[i*unWidth+j] = (int)(pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j+1,unWidth)])>>2;
				buf_data_b[i*unWidth+j] = (int)(pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
									      +(int)pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j+1,unWidth)] \
									      +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
									      +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j+1,unWidth)])>>2;
			}
			else if ((i%2)==0 && (j%2)==0) { //gr
				buf_data_g[i*unWidth+j] = (int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j,unWidth)];
				buf_data_b[i*unWidth+j] = (int)(pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j,unWidth)])>>1;
				buf_data_r[i*unWidth+j] = ((int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j+1,unWidth)])>>1;
			}
			else if ((i%2)==1 && (j%2)==1) { //gb
				buf_data_g[i*unWidth+j] = (int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j,unWidth)];
				buf_data_r[i*unWidth+j] = (int)(pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j,unWidth)])>>1;
				buf_data_b[i*unWidth+j] = ((int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j+1,unWidth)])>>1;
			}
			else { //b
				buf_data_b[i*unWidth+j] = (int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j,unWidth)];
				buf_data_g[i*unWidth+j] = ((int)pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i,unHeight)*unWidth + _im_data_(j+1,unWidth)])>>2;
				buf_data_r[i*unWidth+j] = ((int)pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i-1,unHeight)*unWidth + _im_data_(j+1,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j-1,unWidth)] \
										  +(int)pBayer_32bit[_im_data_(i+1,unHeight)*unWidth + _im_data_(j+1,unWidth)])>>2;
			}

			R_sum += buf_data_r[i*unWidth+j];
			G_sum += buf_data_g[i*unWidth+j];
			B_sum += buf_data_b[i*unWidth+j];
		}
	}


	delete [] buf_data_bayer;
	delete [] buf_data_r;
	delete [] buf_data_g;
	delete [] buf_data_b;

}
