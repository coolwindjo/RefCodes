#include <iostream>
#include <vector>

// Template 만들때, T에 의존하지 않은 모든 Member Function은 
// Template ㅣ 아닌 Base Class를 만들어서 제공
// "Thin template" 또는 "Template hoisting" 이라는 이름을 가진 기술
// WebKit code 참조
// This base class holds the non-template methods and attributes.
// The RefCounted class inherits from it reducing the template bloat
// generated by the compiler (technique called template hoisting)
class RefCountBase
{
protected:
	mutable int refCount = 0;
public:
	void AddRef() const
	{ ++refCount; }
};

template<typename T>
class RefCount : public RefCountBase
{
public:
	void Release() const
	{
		if (--refCount == 0)
			delete static_cast<const T*>(this);
	}
protected:
	~RefCount() { std::cout << "~RefCount" << std::endl; }
};

class Car	: public RefCount<Car> {};

class Truck	: public RefCount<Truck>
{
public:
	Truck(/* args */){}
	~Truck(){ std::cout << "~Truck" <<std::endl; }
};

int main()
{
	const Truck* p = new Truck;
	p->AddRef();		// 호출 할 수 있어야 할까?
	p->Release();

	return 0;
}